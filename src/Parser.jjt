options 
{
    NODE_DEFAULT_VOID = true;
    LOOKAHEAD = 1;
}

PARSER_BEGIN(Parser)

public class Parser {
    public static void main(String[] args) throws ParseException {
        //Parser initialization
        Parser parser;

        if (args.length != 1){
            System.out.println ("Usage: java Parser <file_directory>");
            return;
        }
        else {
            System.out.println("Parser: Reading the file " + args[0] + " ..." );
            try {
                parser = new Parser(new java.io.FileInputStream(args[0]));
            }
            catch(java.io.FileNotFoundException e) {
                System.out.println ("Parser: The file " + args[0] + " was not found.");
                return;
            }
        }

        try {            
            SimpleNode root = parser.Program();
            System.out.println ("Parser: The input was readed sucessfully.");

            root.dump(""); // Prints syntax tree
        }
        catch(TokenMgrError e){
            System.out.println ("Parser: There was an error.");
            System.out.println (e.getMessage());
        }  
        catch(ParseException e){
            System.out.println ("Parser: There was an error during the parse.");            
            System.out.println (e.getMessage());
        }                 
    }
}

PARSER_END(Parser)

// Symbols that should be ignored
SKIP: {
    " " | "\n" | "\t" | "\r"
}

// Must ignore single and multi line comments
SKIP: {
    < "//" (~["\r", "\n"])* >
    | < "/*" > : ML_COMMENT_STATE
}

<ML_COMMENT_STATE> SKIP :
{
    < "*/" > : DEFAULT
    | < ~[] >   
}

// Definition of terminal symbols
TOKEN:
{
    < AND: "&&" >
    | < LOWER : "<" >
    | < PLUS : "+" > 
    | < MINUS : "-" >
    | < TIMES : "*" >
    | < DIVIDE : "/" >
    | < LENGTH : "length" >
    | < OPEN_PAREN : "(" >
    | < CLOSE_PAREN : ")" >
    | < COMMA : "," >
    | < DOT : "." >
    | < OPEN_BRACK : "[" >
    | < CLOSE_BRACK : "]" >
    | < INT : "int" > 
    | < INTARRAY : "int[]" >
    | < NOT : "!" >
    | < NEW :  "new" >
    | < THIS : "this" >
    | < TRUE : "true" >
    | < FALSE : "false" >
    | < ASSIGN : "=" >
    | < BOOLEAN : "boolean" >
    | < SEMI_COLON : ";" >
    | < WHILE : "while" >
    | < IF : "if" >
    | < ELSE : "else" >
    | < OPEN_BRACES : "{" >
    | < CLOSE_BRACES : "}" >
    | < PUBLIC : "public" >
    | < RETURN : "return" >
    | < EXTENDS : "extends" >
    | < CLASS : "class" >
    | < INTEGER_LITERAL : (["0"-"9"])+ >
    | < IDENTIFIER : (["a"-"z","A"-"Z"]) (["a"-"z","A"-"Z","0"-"9","_"])* > 
    
}

// Definition of Terminal Leafs
void Id() #ID: {Token t;}
{
    t=<IDENTIFIER> {jjtThis.value = t.image;}
}

void Integer() #INTEGER: {Token t;}
{
    t=<INTEGER_LITERAL> {jjtThis.value = t.image;}
}

void Type(): {}
{
    TypeNoId() | TypeId()
}

void TypeNoId(): {}
{
    (<INTARRAY>#INTARRAY | <INT>#INT | <BOOLEAN>#BOOLEAN )
}

void TypeId() #ID: {Token t;}
{
    t=<IDENTIFIER> {jjtThis.value = t.image;}
}

void Op(): {}
{
    (<AND>#AND | <LOWER>#LOWER | <PLUS>#PLUS | <MINUS>#MINUS | <TIMES>#TIMES | <DIVIDE>#DIVIDE)
}

// Grammar Definition
SimpleNode Program() #PROGRAM: {}
{
    ClassDeclaration() <EOF> {return jjtThis;}
}

void ClassDeclaration() #CLASS: {}
{
    <CLASS>
    Id()
    (<EXTENDS> Id())? 
    <OPEN_BRACES> (VarDeclaration())* (MethodDeclaration())* <CLOSE_BRACES>
}

void VarDeclaration() #VAR: {}
{
    Type() Id() <SEMI_COLON>
}

void MethodDeclaration() #METHOD: {}
{
    <PUBLIC> Type() Id() <OPEN_PAREN> Params() <CLOSE_PAREN> <OPEN_BRACES> Body() <CLOSE_BRACES>
}

void Params() #PARAMETERS: {}
{
    (Type() Id() (<COMMA> Type() Id())*)?
}

void Body() #BODY: {}
{
    [MethodBody()] Return()
}

void Return() #RETURN: {}
{
    <RETURN> Expression() <SEMI_COLON>
}

void MethodBody(): {} 
{   
    VarDeclarationNoId() MethodBody()
    | Id() (Id() #VAR(2) <SEMI_COLON> MethodBody() | IdStatement() Statements())
    | NoIdStatement() Statements()
}

void VarDeclarationNoId() #VAR: {}
{
    TypeNoId() Id() <SEMI_COLON>
}

void Statements(): {}
{
    [Statement() Statements()]
}

void Statement(): {}
{
    NoIdStatement() | Id() IdStatement()
}

void IdStatement(): {} 
{   
    (
        NoBrackExps()
        | <OPEN_BRACK> Expression() <CLOSE_BRACK> (<ASSIGN> Expression() | NextExps())
        | <ASSIGN> Expression() #ASSIGN(2)
    ) <SEMI_COLON>
}

void NoIdStatement(): {}
{   
    <OPEN_BRACES> Statements() <CLOSE_BRACES>
    | (<IF> <OPEN_PAREN> Expression()#COND <CLOSE_PAREN> Statement()#THEN <ELSE> Statement()#ELSE) #IF(3)
    | (
        <WHILE> 
        try {            
            <OPEN_PAREN> Expression()#COND <CLOSE_PAREN>
        }
        catch (ParseException e) {   
            System.out.println(e.toString());  // Print the error message         
            error_skip();            
        }
        catch (TokenMgrError e) {
            System.out.println(e.toString());  // Print the error message
            error_skip();            
        }
        Statement()#DO
    ) #WHILE(2)
    | Exp1() NextExps() <SEMI_COLON>
}

void Expression(): {}
{   
    (Id() | Exp1()) NextExps()
}
 
void NextExps(): {}
{      
    (NoBrackExps() | <OPEN_BRACK> Expression() #INDEX(2) <CLOSE_BRACK> | {})
}

void NoBrackExps(): {}
{
    (Op() Expression() #OP(3) | <DOT> (<LENGTH> #LENGTH(1) | Id() <OPEN_PAREN> ExpParams() <CLOSE_PAREN> #FCALL(3)))
}

void Exp1(): {}
{
    Integer()
    | <TRUE> #TRUE
    | <FALSE> #FALSE
    | <THIS> #THIS
    | <NEW> (<INT> <OPEN_BRACK> Expression() #NEWARRAY <CLOSE_BRACK> | Id() #NEWOBJ <OPEN_PAREN> <CLOSE_PAREN>)
    | <NOT> Expression() #NOT
    | <OPEN_PAREN> Expression() #EXP <CLOSE_PAREN>
}

void ExpParams() #PARAMETERS: {}
{
    [Expression() (<COMMA> Expression())*]
}

JAVACODE
void error_skip() {
    Token t = getToken(1);

    while(t.kind != CLOSE_PAREN && t.kind != OPEN_BRACES && t.kind != IF && t.kind != WHILE && t.kind != SEMI_COLON) {        
        t = getNextToken();    
    }

    if(t.kind == CLOSE_PAREN || t.kind == SEMI_COLON) {
        getNextToken(); 
    }        
}