/* Parser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. Parser.java */
public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants, ParserConstants {/*@bgen(jjtree)*/
  protected static JJTParserState jjtree = new JJTParserState();public static void main(String[] args) throws ParseException {
        //Parser initialization
        Parser parser;

        if (args.length != 1){
            System.out.println ("Usage: java Parser <file_directory>");
            return;
        }
        else {
            System.out.println("Parser: Reading the file " + args[0] + " ..." );
            try {
                parser = new Parser(new java.io.FileInputStream(args[0]));
            }
            catch(java.io.FileNotFoundException e) {
                System.out.println ("Parser: The file " + args[0] + " was not found.");
                return;
            }
        }

        try {
            SimpleNode root = parser.Program();
            System.out.println ("Parser: The input was readed sucessfully.");

            root.dump(""); // Prints syntax tree
        }
        catch(TokenMgrError e){
            System.out.println ("Parser: There was an error.");
            System.out.println (e.getMessage());
        }
        catch(ParseException e){
            System.out.println ("Parser: There was an error during the parse.");
            System.out.println (e.getMessage());
        }
    }

// Definition of Terminal Leafs
  static final public void Id() throws ParseException {/*@bgen(jjtree) ID */
                SimpleNode jjtn000 = new SimpleNode(JJTID);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
jjtn000.value = t.image;
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Integer() throws ParseException {/*@bgen(jjtree) INTEGER */
                          SimpleNode jjtn000 = new SimpleNode(JJTINTEGER);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(INTEGER_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
jjtn000.value = t.image;
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:
    case INTARRAY:
    case BOOLEAN:{
      TypeNoId();
      break;
      }
    case IDENTIFIER:{
      TypeId();
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void TypeNoId() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTARRAY:{
SimpleNode jjtn001 = new SimpleNode(JJTINTARRAY);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(INTARRAY);
      } finally {
if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
       }
      }
      break;
      }
    case INT:{
SimpleNode jjtn002 = new SimpleNode(JJTINT);
                             boolean jjtc002 = true;
                             jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(INT);
      } finally {
if (jjtc002) {
                               jjtree.closeNodeScope(jjtn002, true);
                             }
      }
      break;
      }
    case BOOLEAN:{
SimpleNode jjtn003 = new SimpleNode(JJTBOOLEAN);
                                         boolean jjtc003 = true;
                                         jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(BOOLEAN);
      } finally {
if (jjtc003) {
                                           jjtree.closeNodeScope(jjtn003, true);
                                         }
      }
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void TypeId() throws ParseException {/*@bgen(jjtree) ID */
                    SimpleNode jjtn000 = new SimpleNode(JJTID);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
jjtn000.value = t.image;
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Op() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AND:{
SimpleNode jjtn001 = new SimpleNode(JJTAND);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(AND);
      } finally {
if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
       }
      }
      break;
      }
    case LOWER:{
SimpleNode jjtn002 = new SimpleNode(JJTLOWER);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(LOWER);
      } finally {
if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002, true);
                   }
      }
      break;
      }
    case PLUS:{
SimpleNode jjtn003 = new SimpleNode(JJTPLUS);
                                   boolean jjtc003 = true;
                                   jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(PLUS);
      } finally {
if (jjtc003) {
                                     jjtree.closeNodeScope(jjtn003, true);
                                   }
      }
      break;
      }
    case MINUS:{
SimpleNode jjtn004 = new SimpleNode(JJTMINUS);
                                                 boolean jjtc004 = true;
                                                 jjtree.openNodeScope(jjtn004);
      try {
        jj_consume_token(MINUS);
      } finally {
if (jjtc004) {
                                                   jjtree.closeNodeScope(jjtn004, true);
                                                 }
      }
      break;
      }
    case TIMES:{
SimpleNode jjtn005 = new SimpleNode(JJTTIMES);
                                                                 boolean jjtc005 = true;
                                                                 jjtree.openNodeScope(jjtn005);
      try {
        jj_consume_token(TIMES);
      } finally {
if (jjtc005) {
                                                                   jjtree.closeNodeScope(jjtn005, true);
                                                                 }
      }
      break;
      }
    case DIVIDE:{
SimpleNode jjtn006 = new SimpleNode(JJTDIVIDE);
                                                                                 boolean jjtc006 = true;
                                                                                 jjtree.openNodeScope(jjtn006);
      try {
        jj_consume_token(DIVIDE);
      } finally {
if (jjtc006) {
                                                                                   jjtree.closeNodeScope(jjtn006, true);
                                                                                 }
      }
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// Grammar Definition
  static final public SimpleNode Program() throws ParseException {/*@bgen(jjtree) PROGRAM */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ClassDeclaration();
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void ClassDeclaration() throws ParseException {/*@bgen(jjtree) CLASS */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CLASS);
      Id();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EXTENDS:{
        jj_consume_token(EXTENDS);
        Id();
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(OPEN_BRACES);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INT:
        case INTARRAY:
        case BOOLEAN:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_1;
        }
        VarDeclaration();
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PUBLIC:{
          ;
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          break label_2;
        }
        MethodDeclaration();
      }
      jj_consume_token(CLOSE_BRACES);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void VarDeclaration() throws ParseException {/*@bgen(jjtree) VAR */
  SimpleNode jjtn000 = new SimpleNode(JJTVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Type();
      Id();
      jj_consume_token(SEMI_COLON);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void MethodDeclaration() throws ParseException {/*@bgen(jjtree) METHOD */
  SimpleNode jjtn000 = new SimpleNode(JJTMETHOD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PUBLIC);
      Type();
      Id();
      jj_consume_token(OPEN_PAREN);
      Params();
      jj_consume_token(CLOSE_PAREN);
      jj_consume_token(OPEN_BRACES);
      Body();
      jj_consume_token(CLOSE_BRACES);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Params() throws ParseException {/*@bgen(jjtree) PARAMETERS */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case INTARRAY:
      case BOOLEAN:
      case IDENTIFIER:{
        Type();
        Id();
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[6] = jj_gen;
            break label_3;
          }
          jj_consume_token(COMMA);
          Type();
          Id();
        }
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Body() throws ParseException {/*@bgen(jjtree) BODY */
  SimpleNode jjtn000 = new SimpleNode(JJTBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPEN_PAREN:
      case INT:
      case INTARRAY:
      case NOT:
      case NEW:
      case THIS:
      case TRUE:
      case FALSE:
      case BOOLEAN:
      case WHILE:
      case IF:
      case OPEN_BRACES:
      case INTEGER_LITERAL:
      case IDENTIFIER:{
        MethodBody();
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      Return();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Return() throws ParseException {/*@bgen(jjtree) RETURN */
  SimpleNode jjtn000 = new SimpleNode(JJTRETURN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RETURN);
      Expression();
      jj_consume_token(SEMI_COLON);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void MethodBody() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:
    case INTARRAY:
    case BOOLEAN:{
      VarDeclarationNoId();
      MethodBody();
      break;
      }
    case IDENTIFIER:{
      Id();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
SimpleNode jjtn001 = new SimpleNode(JJTVAR);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
        try {
          Id();
        } catch (Throwable jjte001) {
if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte001;}
              }
              if (jjte001 instanceof ParseException) {
                {if (true) throw (ParseException)jjte001;}
              }
              {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  2);
              }
        }
        jj_consume_token(SEMI_COLON);
        MethodBody();
        break;
        }
      case AND:
      case LOWER:
      case PLUS:
      case MINUS:
      case TIMES:
      case DIVIDE:
      case DOT:
      case OPEN_BRACK:
      case ASSIGN:{
        IdStatement();
        Statements();
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case OPEN_PAREN:
    case NOT:
    case NEW:
    case THIS:
    case TRUE:
    case FALSE:
    case WHILE:
    case IF:
    case OPEN_BRACES:
    case INTEGER_LITERAL:{
      NoIdStatement();
      Statements();
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void VarDeclarationNoId() throws ParseException {/*@bgen(jjtree) VAR */
  SimpleNode jjtn000 = new SimpleNode(JJTVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      TypeNoId();
      Id();
      jj_consume_token(SEMI_COLON);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Statements() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPEN_PAREN:
    case NOT:
    case NEW:
    case THIS:
    case TRUE:
    case FALSE:
    case WHILE:
    case IF:
    case OPEN_BRACES:
    case INTEGER_LITERAL:
    case IDENTIFIER:{
      Statement();
      Statements();
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
  }

  static final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPEN_PAREN:
    case NOT:
    case NEW:
    case THIS:
    case TRUE:
    case FALSE:
    case WHILE:
    case IF:
    case OPEN_BRACES:
    case INTEGER_LITERAL:{
      NoIdStatement();
      break;
      }
    case IDENTIFIER:{
      Id();
      IdStatement();
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void IdStatement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AND:
    case LOWER:
    case PLUS:
    case MINUS:
    case TIMES:
    case DIVIDE:
    case DOT:{
      NoBrackExps();
      break;
      }
    case OPEN_BRACK:{
      jj_consume_token(OPEN_BRACK);
      Expression();
      jj_consume_token(CLOSE_BRACK);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:{
        jj_consume_token(ASSIGN);
        Expression();
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        NextExps();
      }
      break;
      }
    case ASSIGN:{
      jj_consume_token(ASSIGN);
SimpleNode jjtn001 = new SimpleNode(JJTASSIGN);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
      try {
        Expression();
      } catch (Throwable jjte001) {
if (jjtc001) {
                       jjtree.clearNodeScope(jjtn001);
                       jjtc001 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte001 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte001;}
                     }
                     if (jjte001 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte001;}
                     }
                     {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  2);
                     }
      }
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMI_COLON);
  }

  static final public void NoIdStatement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPEN_BRACES:{
      jj_consume_token(OPEN_BRACES);
      Statements();
      jj_consume_token(CLOSE_BRACES);
      break;
      }
    case IF:{
SimpleNode jjtn004 = new SimpleNode(JJTIF);
        boolean jjtc004 = true;
        jjtree.openNodeScope(jjtn004);
      try {
        jj_consume_token(IF);
        jj_consume_token(OPEN_PAREN);
SimpleNode jjtn001 = new SimpleNode(JJTCOND);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
        try {
          Expression();
        } catch (Throwable jjte001) {
if (jjtc001) {
                             jjtree.clearNodeScope(jjtn001);
                             jjtc001 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte001 instanceof RuntimeException) {
                             {if (true) throw (RuntimeException)jjte001;}
                           }
                           if (jjte001 instanceof ParseException) {
                             {if (true) throw (ParseException)jjte001;}
                           }
                           {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001, true);
                           }
        }
        jj_consume_token(CLOSE_PAREN);
SimpleNode jjtn002 = new SimpleNode(JJTTHEN);
                                                           boolean jjtc002 = true;
                                                           jjtree.openNodeScope(jjtn002);
        try {
          Statement();
        } catch (Throwable jjte002) {
if (jjtc002) {
                                                             jjtree.clearNodeScope(jjtn002);
                                                             jjtc002 = false;
                                                           } else {
                                                             jjtree.popNode();
                                                           }
                                                           if (jjte002 instanceof RuntimeException) {
                                                             {if (true) throw (RuntimeException)jjte002;}
                                                           }
                                                           if (jjte002 instanceof ParseException) {
                                                             {if (true) throw (ParseException)jjte002;}
                                                           }
                                                           {if (true) throw (Error)jjte002;}
        } finally {
if (jjtc002) {
                                                             jjtree.closeNodeScope(jjtn002, true);
                                                           }
        }
        jj_consume_token(ELSE);
SimpleNode jjtn003 = new SimpleNode(JJTELSE);
                                                                                   boolean jjtc003 = true;
                                                                                   jjtree.openNodeScope(jjtn003);
        try {
          Statement();
        } catch (Throwable jjte003) {
if (jjtc003) {
                                                                                     jjtree.clearNodeScope(jjtn003);
                                                                                     jjtc003 = false;
                                                                                   } else {
                                                                                     jjtree.popNode();
                                                                                   }
                                                                                   if (jjte003 instanceof RuntimeException) {
                                                                                     {if (true) throw (RuntimeException)jjte003;}
                                                                                   }
                                                                                   if (jjte003 instanceof ParseException) {
                                                                                     {if (true) throw (ParseException)jjte003;}
                                                                                   }
                                                                                   {if (true) throw (Error)jjte003;}
        } finally {
if (jjtc003) {
                                                                                     jjtree.closeNodeScope(jjtn003, true);
                                                                                   }
        }
      } catch (Throwable jjte004) {
if (jjtc004) {
          jjtree.clearNodeScope(jjtn004);
          jjtc004 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte004 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte004;}
        }
        if (jjte004 instanceof ParseException) {
          {if (true) throw (ParseException)jjte004;}
        }
        {if (true) throw (Error)jjte004;}
      } finally {
if (jjtc004) {
          jjtree.closeNodeScope(jjtn004,  3);
        }
      }
      break;
      }
    case WHILE:{
SimpleNode jjtn007 = new SimpleNode(JJTWHILE);
        boolean jjtc007 = true;
        jjtree.openNodeScope(jjtn007);
      try {
        jj_consume_token(WHILE);
        try {
          jj_consume_token(OPEN_PAREN);
SimpleNode jjtn005 = new SimpleNode(JJTCOND);
                           boolean jjtc005 = true;
                           jjtree.openNodeScope(jjtn005);
          try {
            Expression();
          } catch (Throwable jjte005) {
if (jjtc005) {
                             jjtree.clearNodeScope(jjtn005);
                             jjtc005 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte005 instanceof RuntimeException) {
                             {if (true) throw (RuntimeException)jjte005;}
                           }
                           if (jjte005 instanceof ParseException) {
                             {if (true) throw (ParseException)jjte005;}
                           }
                           {if (true) throw (Error)jjte005;}
          } finally {
if (jjtc005) {
                             jjtree.closeNodeScope(jjtn005, true);
                           }
          }
          jj_consume_token(CLOSE_PAREN);
        } catch (ParseException e) {
System.out.println(e.toString());  // Print the error message         
            error_skip();
        } catch (TokenMgrError e) {
System.out.println(e.toString());  // Print the error message
            error_skip();
        }
SimpleNode jjtn006 = new SimpleNode(JJTDO);
          boolean jjtc006 = true;
          jjtree.openNodeScope(jjtn006);
        try {
          Statement();
        } catch (Throwable jjte006) {
if (jjtc006) {
            jjtree.clearNodeScope(jjtn006);
            jjtc006 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte006 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte006;}
          }
          if (jjte006 instanceof ParseException) {
            {if (true) throw (ParseException)jjte006;}
          }
          {if (true) throw (Error)jjte006;}
        } finally {
if (jjtc006) {
            jjtree.closeNodeScope(jjtn006, true);
          }
        }
      } catch (Throwable jjte007) {
if (jjtc007) {
          jjtree.clearNodeScope(jjtn007);
          jjtc007 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte007 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte007;}
        }
        if (jjte007 instanceof ParseException) {
          {if (true) throw (ParseException)jjte007;}
        }
        {if (true) throw (Error)jjte007;}
      } finally {
if (jjtc007) {
          jjtree.closeNodeScope(jjtn007,  2);
        }
      }
      break;
      }
    case OPEN_PAREN:
    case NOT:
    case NEW:
    case THIS:
    case TRUE:
    case FALSE:
    case INTEGER_LITERAL:{
      Exp1();
      NextExps();
      jj_consume_token(SEMI_COLON);
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      Id();
      break;
      }
    case OPEN_PAREN:
    case NOT:
    case NEW:
    case THIS:
    case TRUE:
    case FALSE:
    case INTEGER_LITERAL:{
      Exp1();
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    NextExps();
  }

  static final public void NextExps() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AND:
    case LOWER:
    case PLUS:
    case MINUS:
    case TIMES:
    case DIVIDE:
    case DOT:{
      NoBrackExps();
      break;
      }
    case OPEN_BRACK:{
      jj_consume_token(OPEN_BRACK);
SimpleNode jjtn001 = new SimpleNode(JJTINDEX);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
      try {
        Expression();
      } catch (Throwable jjte001) {
if (jjtc001) {
                                      jjtree.clearNodeScope(jjtn001);
                                      jjtc001 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte001 instanceof RuntimeException) {
                                      {if (true) throw (RuntimeException)jjte001;}
                                    }
                                    if (jjte001 instanceof ParseException) {
                                      {if (true) throw (ParseException)jjte001;}
                                    }
                                    {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001,  2);
                                    }
      }
      jj_consume_token(CLOSE_BRACK);
      break;
      }
    default:
      jj_la1[17] = jj_gen;

    }
  }

  static final public void NoBrackExps() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AND:
    case LOWER:
    case PLUS:
    case MINUS:
    case TIMES:
    case DIVIDE:{
      Op();
SimpleNode jjtn001 = new SimpleNode(JJTOP);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
      try {
        Expression();
      } catch (Throwable jjte001) {
if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  3);
            }
      }
      break;
      }
    case DOT:{
      jj_consume_token(DOT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LENGTH:{
SimpleNode jjtn002 = new SimpleNode(JJTLENGTH);
                                         boolean jjtc002 = true;
                                         jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(LENGTH);
        } finally {
if (jjtc002) {
                                           jjtree.closeNodeScope(jjtn002,  1);
                                         }
        }
        break;
        }
      case IDENTIFIER:{
        Id();
        jj_consume_token(OPEN_PAREN);
        ExpParams();
SimpleNode jjtn003 = new SimpleNode(JJTFCALL);
                                                                                             boolean jjtc003 = true;
                                                                                             jjtree.openNodeScope(jjtn003);
        try {
          jj_consume_token(CLOSE_PAREN);
        } finally {
if (jjtc003) {
                                                                                               jjtree.closeNodeScope(jjtn003,  3);
                                                                                             }
        }
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Exp1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER_LITERAL:{
      Integer();
      break;
      }
    case TRUE:{
SimpleNode jjtn001 = new SimpleNode(JJTTRUE);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(TRUE);
      } finally {
if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
        }
      }
      break;
      }
    case FALSE:{
SimpleNode jjtn002 = new SimpleNode(JJTFALSE);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(FALSE);
      } finally {
if (jjtc002) {
          jjtree.closeNodeScope(jjtn002, true);
        }
      }
      break;
      }
    case THIS:{
SimpleNode jjtn003 = new SimpleNode(JJTTHIS);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(THIS);
      } finally {
if (jjtc003) {
          jjtree.closeNodeScope(jjtn003, true);
        }
      }
      break;
      }
    case NEW:{
      jj_consume_token(NEW);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:{
        jj_consume_token(INT);
        jj_consume_token(OPEN_BRACK);
SimpleNode jjtn004 = new SimpleNode(JJTNEWARRAY);
                                  boolean jjtc004 = true;
                                  jjtree.openNodeScope(jjtn004);
        try {
          Expression();
        } catch (Throwable jjte004) {
if (jjtc004) {
                                    jjtree.clearNodeScope(jjtn004);
                                    jjtc004 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte004 instanceof RuntimeException) {
                                    {if (true) throw (RuntimeException)jjte004;}
                                  }
                                  if (jjte004 instanceof ParseException) {
                                    {if (true) throw (ParseException)jjte004;}
                                  }
                                  {if (true) throw (Error)jjte004;}
        } finally {
if (jjtc004) {
                                    jjtree.closeNodeScope(jjtn004, true);
                                  }
        }
        jj_consume_token(CLOSE_BRACK);
        break;
        }
      case IDENTIFIER:{
SimpleNode jjtn005 = new SimpleNode(JJTNEWOBJ);
                                                                         boolean jjtc005 = true;
                                                                         jjtree.openNodeScope(jjtn005);
        try {
          Id();
        } catch (Throwable jjte005) {
if (jjtc005) {
                                                                           jjtree.clearNodeScope(jjtn005);
                                                                           jjtc005 = false;
                                                                         } else {
                                                                           jjtree.popNode();
                                                                         }
                                                                         if (jjte005 instanceof RuntimeException) {
                                                                           {if (true) throw (RuntimeException)jjte005;}
                                                                         }
                                                                         if (jjte005 instanceof ParseException) {
                                                                           {if (true) throw (ParseException)jjte005;}
                                                                         }
                                                                         {if (true) throw (Error)jjte005;}
        } finally {
if (jjtc005) {
                                                                           jjtree.closeNodeScope(jjtn005, true);
                                                                         }
        }
        jj_consume_token(OPEN_PAREN);
        jj_consume_token(CLOSE_PAREN);
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case NOT:{
      jj_consume_token(NOT);
SimpleNode jjtn006 = new SimpleNode(JJTNOT);
              boolean jjtc006 = true;
              jjtree.openNodeScope(jjtn006);
      try {
        Expression();
      } catch (Throwable jjte006) {
if (jjtc006) {
                jjtree.clearNodeScope(jjtn006);
                jjtc006 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte006 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte006;}
              }
              if (jjte006 instanceof ParseException) {
                {if (true) throw (ParseException)jjte006;}
              }
              {if (true) throw (Error)jjte006;}
      } finally {
if (jjtc006) {
                jjtree.closeNodeScope(jjtn006, true);
              }
      }
      break;
      }
    case OPEN_PAREN:{
      jj_consume_token(OPEN_PAREN);
SimpleNode jjtn007 = new SimpleNode(JJTEXP);
                     boolean jjtc007 = true;
                     jjtree.openNodeScope(jjtn007);
      try {
        Expression();
      } catch (Throwable jjte007) {
if (jjtc007) {
                       jjtree.clearNodeScope(jjtn007);
                       jjtc007 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte007 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte007;}
                     }
                     if (jjte007 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte007;}
                     }
                     {if (true) throw (Error)jjte007;}
      } finally {
if (jjtc007) {
                       jjtree.closeNodeScope(jjtn007, true);
                     }
      }
      jj_consume_token(CLOSE_PAREN);
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ExpParams() throws ParseException {/*@bgen(jjtree) PARAMETERS */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPEN_PAREN:
      case NOT:
      case NEW:
      case THIS:
      case TRUE:
      case FALSE:
      case INTEGER_LITERAL:
      case IDENTIFIER:{
        Expression();
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[22] = jj_gen;
            break label_4;
          }
          jj_consume_token(COMMA);
          Expression();
        }
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static void error_skip() throws ParseException {Token t = getToken(1);

    while(t.kind != CLOSE_PAREN && t.kind != OPEN_BRACES && t.kind != IF && t.kind != WHILE && t.kind != SEMI_COLON) {
        t = getNextToken();
    }

    if(t.kind == CLOSE_PAREN || t.kind == SEMI_COLON) {
        getNextToken();
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[24];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40c00000,0x40c00000,0x7e00,0x0,0x40c00000,0x0,0x40000,0x40c00000,0x5fc10000,0x20187e00,0x5fc10000,0x1f010000,0x1f010000,0x20000000,0x20187e00,0x1f010000,0x1f010000,0x187e00,0x8000,0x87e00,0x400000,0x1f010000,0x40000,0x1f010000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x400,0x0,0x0,0x80,0x400,0x20,0x0,0x400,0x60b,0x400,0x60b,0x60b,0x60b,0x0,0x0,0x20b,0x600,0x0,0x400,0x0,0x400,0x200,0x0,0x600,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[43];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 24; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 43; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
