/* Parser.java */
/* Generated By:JavaCC: Do not edit this line. Parser.java */
public class Parser implements ParserConstants {
    public static void main(String[] args) throws ParseException {
        Parser parser = new Parser(System.in);
        parser.Program();

    }

  static final public void Program() throws ParseException {
    ClassDeclaration();
    jj_consume_token(0);
  }

  static final public void ClassDeclaration() throws ParseException {
    jj_consume_token(CLASS);
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EXTENDS:{
      jj_consume_token(EXTENDS);
      jj_consume_token(IDENTIFIER);
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    jj_consume_token(OPEN_BRACES);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case INTARRAY:
      case BOOLEAN:
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      VarDeclaration();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PUBLIC:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      MethodDeclaration();
    }
    jj_consume_token(CLOSE_BRACES);
  }

  static final public void VarDeclaration() throws ParseException {
    Type();
    jj_consume_token(IDENTIFIER);
    jj_consume_token(SEMI_COLON);
  }

  static final public void Type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTARRAY:{
      jj_consume_token(INTARRAY);
      break;
      }
    case INT:{
      jj_consume_token(INT);
      break;
      }
    case BOOLEAN:{
      jj_consume_token(BOOLEAN);
      break;
      }
    case IDENTIFIER:{
      jj_consume_token(IDENTIFIER);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void MethodDeclaration() throws ParseException {
    jj_consume_token(PUBLIC);
    Type();
    jj_consume_token(IDENTIFIER);
    jj_consume_token(OPEN_PAREN);
    Params();
    jj_consume_token(CLOSE_PAREN);
    jj_consume_token(OPEN_BRACES);
    MethodVars();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPEN_PAREN:
      case NOT:
      case NEW:
      case THIS:
      case TRUE:
      case FALSE:
      case WHILE:
      case IF:
      case OPEN_BRACES:
      case INTEGER_LITERAL:
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      Statement();
    }
    jj_consume_token(RETURN);
    Expression();
    jj_consume_token(SEMI_COLON);
    jj_consume_token(CLOSE_BRACES);
  }

  static final public void Params() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:
    case INTARRAY:
    case BOOLEAN:
    case IDENTIFIER:{
      Type();
      jj_consume_token(IDENTIFIER);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        Type();
        jj_consume_token(IDENTIFIER);
      }
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
  }

  static final public void MethodVars() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:
    case INTARRAY:
    case BOOLEAN:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTARRAY:{
        jj_consume_token(INTARRAY);
        break;
        }
      case INT:{
        jj_consume_token(INT);
        break;
        }
      case BOOLEAN:{
        jj_consume_token(BOOLEAN);
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(IDENTIFIER);
      jj_consume_token(SEMI_COLON);
      MethodVars();
      break;
      }
    case IDENTIFIER:{
      jj_consume_token(IDENTIFIER);
      MaybeStatement();
      break;
      }
    case EMPTY:{
      jj_consume_token(EMPTY);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void MaybeStatement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      jj_consume_token(IDENTIFIER);
      jj_consume_token(SEMI_COLON);
      MethodVars();
      break;
      }
    case AND:
    case LOWER:
    case PLUS:
    case MINUS:
    case TIMES:
    case DIVIDE:
    case DOT:
    case OPEN_BRACK:
    case ASSIGN:{
      IdStatement();
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void IdStatement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AND:
    case LOWER:
    case PLUS:
    case MINUS:
    case TIMES:
    case DIVIDE:
    case DOT:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:
      case LOWER:
      case PLUS:
      case MINUS:
      case TIMES:
      case DIVIDE:{
        Op();
        Expression();
        break;
        }
      case DOT:{
        jj_consume_token(DOT);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LENGTH:{
          jj_consume_token(LENGTH);
          break;
          }
        case IDENTIFIER:{
          jj_consume_token(IDENTIFIER);
          jj_consume_token(OPEN_PAREN);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case OPEN_PAREN:
          case NOT:
          case NEW:
          case THIS:
          case TRUE:
          case FALSE:
          case INTEGER_LITERAL:
          case IDENTIFIER:{
            ExpParams();
            break;
            }
          default:
            jj_la1[10] = jj_gen;
            ;
          }
          jj_consume_token(CLOSE_PAREN);
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      NextExps();
      break;
      }
    case OPEN_BRACK:{
      jj_consume_token(OPEN_BRACK);
      Expression();
      jj_consume_token(CLOSE_BRACK);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:{
        jj_consume_token(ASSIGN);
        Expression();
        break;
        }
      case AND:
      case LOWER:
      case PLUS:
      case MINUS:
      case TIMES:
      case DIVIDE:
      case DOT:
      case OPEN_BRACK:
      case EMPTY:{
        NextExps();
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case ASSIGN:{
      jj_consume_token(ASSIGN);
      Expression();
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMI_COLON);
  }

  static final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPEN_BRACES:{
      jj_consume_token(OPEN_BRACES);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OPEN_PAREN:
        case NOT:
        case NEW:
        case THIS:
        case TRUE:
        case FALSE:
        case WHILE:
        case IF:
        case OPEN_BRACES:
        case INTEGER_LITERAL:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          break label_5;
        }
        Statement();
      }
      jj_consume_token(CLOSE_BRACES);
      break;
      }
    case IF:{
      jj_consume_token(IF);
      jj_consume_token(OPEN_PAREN);
      Expression();
      jj_consume_token(CLOSE_PAREN);
      Statement();
      jj_consume_token(ELSE);
      Statement();
      break;
      }
    case WHILE:{
      jj_consume_token(WHILE);
      jj_consume_token(OPEN_PAREN);
      Expression();
      jj_consume_token(CLOSE_PAREN);
      Statement();
      break;
      }
    case IDENTIFIER:{
      jj_consume_token(IDENTIFIER);
      IdStatement();
      break;
      }
    case OPEN_PAREN:
    case NOT:
    case NEW:
    case THIS:
    case TRUE:
    case FALSE:
    case INTEGER_LITERAL:{
      Exp1();
      NextExps();
      jj_consume_token(SEMI_COLON);
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Expression() throws ParseException {
    Exp();
    NextExps();
  }

  static final public void NextExps() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AND:
    case LOWER:
    case PLUS:
    case MINUS:
    case TIMES:
    case DIVIDE:
    case DOT:
    case OPEN_BRACK:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:
      case LOWER:
      case PLUS:
      case MINUS:
      case TIMES:
      case DIVIDE:{
        Op();
        Expression();
        break;
        }
      case OPEN_BRACK:{
        jj_consume_token(OPEN_BRACK);
        Expression();
        jj_consume_token(CLOSE_BRACK);
        break;
        }
      case DOT:{
        jj_consume_token(DOT);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LENGTH:{
          jj_consume_token(LENGTH);
          break;
          }
        case IDENTIFIER:{
          jj_consume_token(IDENTIFIER);
          jj_consume_token(OPEN_PAREN);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case OPEN_PAREN:
          case NOT:
          case NEW:
          case THIS:
          case TRUE:
          case FALSE:
          case INTEGER_LITERAL:
          case IDENTIFIER:{
            ExpParams();
            break;
            }
          default:
            jj_la1[17] = jj_gen;
            ;
          }
          jj_consume_token(CLOSE_PAREN);
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case EMPTY:{
      jj_consume_token(EMPTY);
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Exp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      jj_consume_token(IDENTIFIER);
      break;
      }
    case OPEN_PAREN:
    case NOT:
    case NEW:
    case THIS:
    case TRUE:
    case FALSE:
    case INTEGER_LITERAL:{
      Exp1();
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Exp1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER_LITERAL:{
      jj_consume_token(INTEGER_LITERAL);
      break;
      }
    case TRUE:{
      jj_consume_token(TRUE);
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
      break;
      }
    case THIS:{
      jj_consume_token(THIS);
      break;
      }
    case NEW:{
      jj_consume_token(NEW);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:{
        jj_consume_token(INT);
        jj_consume_token(OPEN_BRACK);
        Expression();
        jj_consume_token(CLOSE_BRACK);
        break;
        }
      case IDENTIFIER:{
        jj_consume_token(IDENTIFIER);
        jj_consume_token(OPEN_PAREN);
        jj_consume_token(CLOSE_PAREN);
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case NOT:{
      jj_consume_token(NOT);
      Expression();
      break;
      }
    case OPEN_PAREN:{
      jj_consume_token(OPEN_PAREN);
      Expression();
      jj_consume_token(CLOSE_PAREN);
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ExpParams() throws ParseException {
    Expression();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
      Expression();
    }
  }

  static final public void Op() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AND:{
      jj_consume_token(AND);
      break;
      }
    case LOWER:{
      jj_consume_token(LOWER);
      break;
      }
    case PLUS:{
      jj_consume_token(PLUS);
      break;
      }
    case MINUS:{
      jj_consume_token(MINUS);
      break;
      }
    case TIMES:{
      jj_consume_token(TIMES);
      break;
      }
    case DIVIDE:{
      jj_consume_token(DIVIDE);
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[26];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x40c0000,0x0,0x40c0000,0xb1f01000,0x4000,0x40c0000,0x40c0000,0x40c0000,0x20187e0,0x1f01000,0x800,0x87e0,0x20187e0,0x20187e0,0xb1f01000,0xb1f01000,0x1f01000,0x800,0x187e0,0x187e0,0x1f01000,0x40000,0x1f01000,0x4000,0x7e0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x8,0x40,0x2,0x40,0x60,0x0,0x40,0x0,0xc0,0x40,0x60,0x40,0x0,0x80,0x0,0x60,0x60,0x60,0x40,0x0,0x80,0x60,0x40,0x20,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[41];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 26; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 41; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
