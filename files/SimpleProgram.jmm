/*
 * Class declaration
 * WARNING - Used to test syntactical and semantic errors. Not meant to be compiled
 */
class Test extends Base {
    int x;
    boolean check;

    public static void main(String[] args) {
        int arg;
        new Test().computeFac(arg);
    }

    public int computeFac(int num) {
        return this.computeFac(num, new int[3]);
    }

    public int computeFac(int num, int[] redundant) {
        int num_aux;
        boolean another_redundant;

        Test another_one;
        Base and_another_one;

        redundant[0] = num;
        num_aux = new int[this.computeFac(this.gimmeFive(), new int[new Text().f(1)])].length;
        //num_aux = x + 5 * 4 / (2 + 3 / 4);

        //x = new Base().func((x - 1 + 3) * 4 + 3 / this.gimmeFive(), !check && false + new int[5].length);
        num_aux = x + new Text().gimmeFive();
        x = num_aux * new Test().gimmeFive() + this.computeFac(num_aux);
        x = x + 3;

        // redundant[0].f();

        this.computeFac(redundant[this.gimmeFive()]);

        //num_aux = x + 5 * 4 / (2 + 3 / 4);
        if (check && another_redundant)
            num_aux = this.gimmeFive();
        else {
            //num_aux = x + 5 * 4 / (2 + 3 / 4);
            while (num < 1) {
               x = x + 5;
               //num_aux = x + 5 * 4 / (2 + 3 / 4);            
            }

            if (num < 1)
                num_aux = this.gimmeFive();//num_aux = x + 5 * 4 / (2 + 3 / 4);
            else
                num_aux = x + 5 * 4 / (2 + 3 / 4);
            
            //x = new Base().func((x + 3) * 4 + 3 / this.gimmeFive(), !check && false + new int[5].length);
        }
        
        //num_aux = x + 5 * 4 / (2 + 3 / 4);
        num_aux = x + 2 * 6;

        return x + 5 * 4 / (2 + redundant[3] / 4);
    }

    public int gimmeFive() {return 5;}
}